{"title":"Local setup for working with Overture data","markdown":{"yaml":{"title":"Local setup for working with Overture data","execute":{"echo":true,"eval":true,"include":true},"format":{"revealjs":{"theme":["pres_style.scss","default"],"fig-align":"center","code-fold":false}},"author":[{"name":"Ivann Schlosser","email":"ivann.schlosser@ox.co.uk","url":"ischlosser.com","affiliations":[{"name":"Oxford Progamme for Sustainable Infrastructure Systems (OPSIS)","address":"South Parks Road","postal-code":"OX1 3QY","city":"Oxford"}]}]},"headingText":"Importing the data","containsRefs":false,"markdown":"\n\n\n```{python}\n#| echo: false\n\nimport geopandas as gpd\nfrom matplotlib import pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\n```\n\n```{python}\nimport duckdb as db\n\nafrica_roads = db.read_parquet(\"../tanzania_roads.geoparquet\")\n```\n\nThe data set is read as traditional parquet in which the geometry column is a `BLOB`. \n\n```{python}\n#| echo: false\n#| \ndb.sql(\"SELECT id,class,geometry FROM africa_roads LIMIT 10;\")\n\n```\n\nThe `duckdb` loaders do not support reading *geoparquet* at the moment, but this feature is expected in the upcoming version. We stick to this format for its efficiency when storing large extracts.\n\nTo further work with the geometry, we install the `duckdb` extension. \n```{python}\n# installing and loading the extension.\ndb.install_extension(\"spatial\")\ndb.load_extension(\"spatial\")\n\n```\n\n## Basic interaction with the data\n\nStill with the `duckdb` package and its SQL-like syntax.\n\n#### Counting values\n\n```{python}\ndb.sql(\"SELECT count(*),class FROM africa_roads GROUP BY class;\")\n```\n\n## Data Manipulation\n\nThe advantage of working with `duckdb` is that intensive computations are performed outside the python environment, and all we need to do is collect the results.\n\n### Etracting a subset\n\n```{python}\n# filtering out cycleways\nafrican_cycleways = db.sql(\"Select id,ST_GeomFromWKB(geometry) as geometry,subtype,class from africa_roads where class='cycleway'\")\n\n# intermediate step: transform the geometry into WKT and read the subset of data as a pandas DataFrame\nafrican_cycleways_wkt = db.sql(\"select id, ST_AsText(geometry) as geometry, subtype, class from african_cycleways;\").df()\n\n# Finally, convert the geometry and create a geopandas GeoDataFrame. \nafrican_cycleways_df = gpd.GeoDataFrame(african_cycleways_wkt\n                                        ,geometry=gpd.GeoSeries.from_wkt(african_cycleways_wkt[\"geometry\"])\n                                        ,crs=4326)\nafrican_cycleways_df.head()\n\n```\n\nThe resulting types:\n\n```{python}\n#| echo: false\nafrican_cycleways_df.dtypes\n```\n\n## Plotting\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"Cycleways of Tanzania\"\n\n\nf, ax = plt.subplots()\ncmap = ListedColormap(\n    [\n        \"#941339\",  # motorway\n        # \"#982261\",  # primary\n        # \"#020202\",  # rail\n        \"#8748bc\",  # secondary\n        # \"#48bc7b\",  # tertiary\n        # \"#cb3e4e\",  # trunk\n    ]\n)\n\nafrican_cycleways_df.plot(\n    ax=ax,\n    column=\"class\",\n    legend=True,\n    alpha=1,\n    linewidth=0.5,\n    categorical=True,\n    cmap=cmap,\n)\n\nax.grid()\nax.set_title(\"Main roads of Tanzania\")\nax.set_xlabel(\"Longitude [deg]\")\nax.set_ylabel(\"Latitude [deg]\")\n\nplt.show()\n\n```\n","srcMarkdownNoYaml":"\n\n## Importing the data\n\n```{python}\n#| echo: false\n\nimport geopandas as gpd\nfrom matplotlib import pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\n```\n\n```{python}\nimport duckdb as db\n\nafrica_roads = db.read_parquet(\"../tanzania_roads.geoparquet\")\n```\n\nThe data set is read as traditional parquet in which the geometry column is a `BLOB`. \n\n```{python}\n#| echo: false\n#| \ndb.sql(\"SELECT id,class,geometry FROM africa_roads LIMIT 10;\")\n\n```\n\nThe `duckdb` loaders do not support reading *geoparquet* at the moment, but this feature is expected in the upcoming version. We stick to this format for its efficiency when storing large extracts.\n\nTo further work with the geometry, we install the `duckdb` extension. \n```{python}\n# installing and loading the extension.\ndb.install_extension(\"spatial\")\ndb.load_extension(\"spatial\")\n\n```\n\n## Basic interaction with the data\n\nStill with the `duckdb` package and its SQL-like syntax.\n\n#### Counting values\n\n```{python}\ndb.sql(\"SELECT count(*),class FROM africa_roads GROUP BY class;\")\n```\n\n## Data Manipulation\n\nThe advantage of working with `duckdb` is that intensive computations are performed outside the python environment, and all we need to do is collect the results.\n\n### Etracting a subset\n\n```{python}\n# filtering out cycleways\nafrican_cycleways = db.sql(\"Select id,ST_GeomFromWKB(geometry) as geometry,subtype,class from africa_roads where class='cycleway'\")\n\n# intermediate step: transform the geometry into WKT and read the subset of data as a pandas DataFrame\nafrican_cycleways_wkt = db.sql(\"select id, ST_AsText(geometry) as geometry, subtype, class from african_cycleways;\").df()\n\n# Finally, convert the geometry and create a geopandas GeoDataFrame. \nafrican_cycleways_df = gpd.GeoDataFrame(african_cycleways_wkt\n                                        ,geometry=gpd.GeoSeries.from_wkt(african_cycleways_wkt[\"geometry\"])\n                                        ,crs=4326)\nafrican_cycleways_df.head()\n\n```\n\nThe resulting types:\n\n```{python}\n#| echo: false\nafrican_cycleways_df.dtypes\n```\n\n## Plotting\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"Cycleways of Tanzania\"\n\n\nf, ax = plt.subplots()\ncmap = ListedColormap(\n    [\n        \"#941339\",  # motorway\n        # \"#982261\",  # primary\n        # \"#020202\",  # rail\n        \"#8748bc\",  # secondary\n        # \"#48bc7b\",  # tertiary\n        # \"#cb3e4e\",  # trunk\n    ]\n)\n\nafrican_cycleways_df.plot(\n    ax=ax,\n    column=\"class\",\n    legend=True,\n    alpha=1,\n    linewidth=0.5,\n    categorical=True,\n    cmap=cmap,\n)\n\nax.grid()\nax.set_title(\"Main roads of Tanzania\")\nax.set_xlabel(\"Longitude [deg]\")\nax.set_ylabel(\"Latitude [deg]\")\n\nplt.show()\n\n```\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"presentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.555","auto-stretch":true,"editor":"visual","title":"Local setup for working with Overture data","author":[{"name":"Ivann Schlosser","email":"ivann.schlosser@ox.co.uk","url":"ischlosser.com","affiliations":[{"name":"Oxford Progamme for Sustainable Infrastructure Systems (OPSIS)","address":"South Parks Road","postal-code":"OX1 3QY","city":"Oxford"}]}],"theme":["pres_style.scss","default"]}}},"projectFormats":[]}